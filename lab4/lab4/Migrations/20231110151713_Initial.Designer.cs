// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using lab4.Data;

#nullable disable

namespace lab4.Migrations
{
    [DbContext(typeof(Lab4Context))]
    [Migration("20231110151713_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("lab4.Models.Many_to_Many.Asociatie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Asociatii");
                });

            modelBuilder.Entity("lab4.Models.Many_to_Many.Boboc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Boboci");
                });

            modelBuilder.Entity("lab4.Models.Many_to_Many.ModelsRelations", b =>
                {
                    b.Property<Guid>("BobocId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AsociatieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BobocId", "AsociatieId");

                    b.HasIndex("AsociatieId");

                    b.ToTable("ModelsRelations");
                });

            modelBuilder.Entity("lab4.Models.One_to_Many.Facultate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UniversitateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UniversitateId");

                    b.ToTable("Facultati");
                });

            modelBuilder.Entity("lab4.Models.One_to_Many.Universitate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Universitati");
                });

            modelBuilder.Entity("lab4.Models.One_to_One.Materie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProfesorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfesorId")
                        .IsUnique();

                    b.ToTable("Materii");
                });

            modelBuilder.Entity("lab4.Models.One_to_One.Profesor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MaterieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Profesori");
                });

            modelBuilder.Entity("lab4.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("lab4.Models.Many_to_Many.ModelsRelations", b =>
                {
                    b.HasOne("lab4.Models.Many_to_Many.Asociatie", "Asociatie")
                        .WithMany("ModelsRelations")
                        .HasForeignKey("AsociatieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lab4.Models.Many_to_Many.Boboc", "Boboc")
                        .WithMany("ModelsRelations")
                        .HasForeignKey("BobocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asociatie");

                    b.Navigation("Boboc");
                });

            modelBuilder.Entity("lab4.Models.One_to_Many.Facultate", b =>
                {
                    b.HasOne("lab4.Models.One_to_Many.Universitate", "Universitate")
                        .WithMany("Facultati")
                        .HasForeignKey("UniversitateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Universitate");
                });

            modelBuilder.Entity("lab4.Models.One_to_One.Materie", b =>
                {
                    b.HasOne("lab4.Models.One_to_One.Profesor", "Profesor")
                        .WithOne("Materie")
                        .HasForeignKey("lab4.Models.One_to_One.Materie", "ProfesorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profesor");
                });

            modelBuilder.Entity("lab4.Models.Many_to_Many.Asociatie", b =>
                {
                    b.Navigation("ModelsRelations");
                });

            modelBuilder.Entity("lab4.Models.Many_to_Many.Boboc", b =>
                {
                    b.Navigation("ModelsRelations");
                });

            modelBuilder.Entity("lab4.Models.One_to_Many.Universitate", b =>
                {
                    b.Navigation("Facultati");
                });

            modelBuilder.Entity("lab4.Models.One_to_One.Profesor", b =>
                {
                    b.Navigation("Materie")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
